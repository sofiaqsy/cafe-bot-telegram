import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, ConversationHandler, CallbackQueryHandler, ContextTypes
from utils.sheets import sincronizar_almacen_con_compras, FASES_CAFE, get_almacen_cantidad

# Configurar logging
logger = logging.getLogger(__name__)

# Estados para la conversaci√≥n
CONFIRMAR = 0

async def sincronizar_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Comando para sincronizar manualmente el almac√©n con las compras"""
    user_id = update.effective_user.id
    logger.info(f"Usuario {user_id} inici√≥ comando /sincronizar")
    
    # Crear teclado de confirmaci√≥n
    keyboard = [
        [InlineKeyboardButton("‚úÖ S√≠, sincronizar almac√©n", callback_data="confirmar_sincronizacion")],
        [InlineKeyboardButton("‚ùå No, cancelar", callback_data="cancelar_sincronizacion")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è SINCRONIZACI√ìN DEL ALMAC√âN\n\n"
        "Este proceso buscar√° compras existentes en el sistema y crear√° los registros correspondientes en el almac√©n.\n\n"
        "Se recomienda ejecutar este comando si:\n"
        "- No se muestran datos correctos en el almac√©n\n"
        "- Hay errores al ver las fases disponibles\n"
        "- Se han agregado compras nuevas recientemente\n\n"
        "¬øDesea continuar con la sincronizaci√≥n?",
        reply_markup=reply_markup
    )
    return CONFIRMAR

async def procesar_sincronizacion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Procesa la respuesta a la sincronizaci√≥n"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirmar_sincronizacion":
        await query.edit_message_text("üîÑ Sincronizando almac√©n con las compras existentes...")
        
        # Ejecutar sincronizaci√≥n
        result = sincronizar_almacen_con_compras()
        
        if result:
            # Obtener cantidades actuales para informar
            cantidades = {}
            for fase in FASES_CAFE:
                cantidad = get_almacen_cantidad(fase)
                cantidades[fase] = cantidad
            
            # Formatear mensaje de √©xito
            mensaje = "‚úÖ Sincronizaci√≥n completada exitosamente\n\n"
            mensaje += "üìä CANTIDADES ACTUALES EN ALMAC√âN:\n"
            for fase, cantidad in cantidades.items():
                mensaje += f"- {fase}: {cantidad} kg\n"
            
            await query.edit_message_text(mensaje)
        else:
            await query.edit_message_text(
                "‚ùå Error al sincronizar el almac√©n\n\n"
                "Hubo un problema durante la sincronizaci√≥n. Por favor, revisa los logs del sistema "
                "o contacta al administrador para solucionar el problema."
            )
    else:
        await query.edit_message_text("‚ùå Sincronizaci√≥n cancelada.")
    
    return ConversationHandler.END

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela la operaci√≥n de sincronizaci√≥n"""
    user_id = update.effective_user.id
    logger.info(f"Usuario {user_id} cancel√≥ la sincronizaci√≥n")
    
    await update.message.reply_text("‚ùå Sincronizaci√≥n cancelada.")
    return ConversationHandler.END

def register_sincronizar_handlers(application):
    """Registra los manejadores para el comando de sincronizaci√≥n"""
    # Crear manejador de conversaci√≥n
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("sincronizar", sincronizar_command)],
        states={
            CONFIRMAR: [CallbackQueryHandler(procesar_sincronizacion)]
        },
        fallbacks=[CommandHandler("cancelar", cancelar)]
    )
    
    # Agregar el manejador a la aplicaci√≥n
    application.add_handler(conv_handler)
    logger.info("Handlers de sincronizaci√≥n registrados")