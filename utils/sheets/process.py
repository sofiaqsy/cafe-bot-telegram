"""\nMódulo para gestionar los procesos de transformación del café en el sistema de hojas de cálculo.\n"""\nimport logging\n\nfrom utils.sheets.constants import TRANSICIONES_PERMITIDAS, MERMAS_SUGERIDAS\nfrom utils.sheets.almacen import update_almacen\n\n# Configurar logging\nlogger = logging.getLogger(__name__)\n\ndef es_transicion_valida(origen, destino):\n    """\n    Verifica si la transición de fase es válida.\n    \n    Args:\n        origen: Fase de origen\n        destino: Fase de destino\n        \n    Returns:\n        bool: True si la transición es válida, False en caso contrario\n    """\n    if origen not in TRANSICIONES_PERMITIDAS:\n        return False\n    \n    return destino in TRANSICIONES_PERMITIDAS[origen]\n\ndef calcular_merma_sugerida(origen, destino, cantidad):\n    """\n    Calcula la merma sugerida para una transición específica.\n    \n    Args:\n        origen: Fase de origen\n        destino: Fase de destino\n        cantidad: Cantidad a procesar en kg\n        \n    Returns:\n        float: Merma sugerida en kg\n    """\n    try:\n        # Construir clave para buscar en el diccionario de mermas\n        clave_merma = f"{origen}_{destino}"\n        \n        # Verificar si existe un porcentaje de merma para esta transición\n        if clave_merma in MERMAS_SUGERIDAS:\n            factor_merma = MERMAS_SUGERIDAS[clave_merma]\n            merma_calculada = float(cantidad) * factor_merma\n            return round(merma_calculada, 2)\n        \n        return 0.0\n    except Exception as e:\n        logger.error(f"Error al calcular merma sugerida: {e}")\n        return 0.0\n\ndef actualizar_almacen_desde_proceso(origen, destino, cantidad, merma):\n    """\n    Actualiza el almacén basado en un proceso de transformación.\n    \n    Args:\n        origen: Fase de origen del café\n        destino: Fase de destino del café\n        cantidad: Cantidad procesada en kg\n        merma: Cantidad de merma en kg\n    \n    Returns:\n        bool: True si se actualizó correctamente, False en caso contrario\n    """\n    try:\n        logger.info(f"Actualizando almacén desde proceso - Origen: {origen}, Destino: {destino}, Cantidad: {cantidad} kg, Merma: {merma} kg")\n        \n        # 1. Restar la cantidad procesada de la fase de origen\n        resultado_origen = update_almacen(\n            fase=origen,\n            cantidad_cambio=cantidad,\n            operacion="restar",\n            notas=f"Proceso a {destino}"\n        )\n        \n        # Manejar el caso donde resultado_origen es una tuple (usado en ventas)\n        if isinstance(resultado_origen, tuple):\n            resultado_origen = resultado_origen[0]\n        \n        # 2. Calcular cantidad resultante (restando merma)\n        cantidad_resultante = max(0, float(cantidad) - float(merma))\n        \n        # 3. Sumar la cantidad resultante a la fase de destino\n        resultado_destino = update_almacen(\n            fase=destino,\n            cantidad_cambio=cantidad_resultante,\n            operacion="sumar",\n            notas=f"Procesado desde {origen}"\n        )\n        \n        return resultado_origen and resultado_destino\n    except Exception as e:\n        logger.error(f"Error al actualizar almacén desde proceso: {e}")\n        return False