"""\nMódulo con funciones utilitarias para el sistema de hojas de cálculo.\n"""\nimport logging\nimport string\nimport random\nimport datetime\n\n# Configurar logging\nlogger = logging.getLogger(__name__)\n\ndef generate_unique_id(length=6, prefix="CP-"):\n    """\n    Genera un ID único alfanumérico\n    \n    Args:\n        length: Longitud del ID (default: 6)\n        prefix: Prefijo para el ID (default: "CP-" para compras)\n    \n    Returns:\n        str: ID único alfanumérico\n    """\n    # Caracteres permitidos (letras mayúsculas y números)\n    chars = string.ascii_uppercase + string.digits\n    \n    # Generar un ID único\n    unique_id = prefix + ''.join(random.choice(chars) for _ in range(length))\n    \n    return unique_id\n\ndef generate_almacen_id(length=6):\n    """\n    Genera un ID único alfanumérico para registros del almacén\n    \n    Args:\n        length: Longitud del ID (default: 6)\n    \n    Returns:\n        str: ID único alfanumérico\n    """\n    return generate_unique_id(length, "AL-")\n\ndef format_date_for_sheets(date_str):\n    """\n    Formatea una fecha para evitar que Google Sheets la convierta automáticamente\n    \n    Args:\n        date_str: Fecha en formato YYYY-MM-DD\n    \n    Returns:\n        str: Fecha formateada para Google Sheets\n    """\n    # Verificar formato\n    if isinstance(date_str, str) and len(date_str) == 10 and date_str[4] == '-' and date_str[7] == '-':\n        # Prefijo con comilla simple para forzar formato de texto en Google Sheets\n        return f"'{date_str}'"\n    return date_str\n\ndef get_current_datetime_str():\n    """\n    Obtiene la fecha y hora actual como string formateado\n    \n    Returns:\n        str: Fecha y hora actual en formato YYYY-MM-DD HH:MM:SS\n    """\n    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n\ndef safe_float(value):\n    """\n    Convierte un valor a float de forma segura\n    \n    Args:\n        value: Valor a convertir\n    \n    Returns:\n        float: Valor convertido o 0.0 en caso de error\n    """\n    try:\n        if isinstance(value, (int, float)):\n            return float(value)\n        elif isinstance(value, str):\n            return float(value.replace(',', '.'))\n        return 0.0\n    except (ValueError, TypeError):\n        return 0.0